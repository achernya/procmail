.de Id
.ds Rv \\$3
.ds Dt \\$4
..
.Id $Id: procmail.1,v 2.6 1991/07/04 17:14:45 berg Rel $
.de Sh
.br
.ne 9
.SH "\\$1"
..
.de Ss
.br
.ne 9
.SS "\\$1"
..
.de Tp
.br
.ne 9
.TP "\\$1"
..
.TH PROCMAIL 1 \*(Dt BuGless
.SH NAME
procmail \- autonomous mail processor
.SH SYNOPSIS
.B procmail
.RB [ " \-\fR[\fPd\fR|\fPp\fR|\fPv\fR]\fP " ]
.RI [ " parameter\fB=\fPvalue " | " rcfile " ]
\&.\|.\|.
.Sh DESCRIPTION
.LP
For a quick start, see
.B NOTES
at the end.
.LP
.B procmail
should be invoked automatically over the
.B .forward
file mechanism as soon as mail arrives.  When invoked, it first sets some
environment variables to default values, reads the mail message from stdin
until an EOF, separates the body from the header, and then, if no command
line arguments are present, it starts to look for a file named
.B .procmailrc
in your home directory.  According to the processing recipes in this file,
the mail message that just arrived gets distributed into the right folder
(and more).
.Ss Defaults
.Tp 2.2i
.B "USER, HOME and SHELL"
Your (the recipient's) defaults
.Tp
.B SHELLMETAS
"'`&#()[]*?|<>~;!\\
.Tp
.B SHELLFLAGS
-c
.Tp
.B MAILDIR
$HOME
.Tp
.BR DEFAULT
$MAILDIR/.mailbox
.Tp
.B ORGMAIL
/var/spool/mail/$USER
.Tp
.B MSGPREFIX
msg.
.Tp
.B GREP
/usr/bin/egrep
.Tp
.B SENDMAIL
/usr/lib/sendmail
.Tp
.B LOCKEXT
\&.lock
.Ss Environment
.LP
Before you get lost in the multitude of environment variables, keep in mind
that all of them have reasonable defaults.
.Tp 1.2i
.B MAILDIR
Current directory while procmail is executing (that means that all paths
are relative to $MAILDIR).
.Tp
.B DEFAULT
Default
.B mailbox
file (if not told otherwise, procmail will dump mail in this mailbox).
.Tp
.B MSGPREFIX
Filename prefix that is used when delivering to a directory (not used when
delivering to a MH directory).
.Tp
.B LOGFILE
All incoming messages will be logged here with their `From ' and `Subject:'
lines in the header, and an additional line specifying what folder it
finally went to and how long (in bytes) the message was.  This file will
also contain any error or diagnostic messages from procmail
(normally none :-) or any other programs started by procmail.  If this file
is not specified it defaults to
.BR /dev/null .
.Tp
.B LOG
Anything assigned to this variable will be echoed in $LOGFILE.
.Tp
.B ORGMAIL
Usually the system mailbox (\fBOR\fPi\fBG\fPinal \fBMAIL\fPbox).  If, for
some obscure reason (like `\fBfilesystem full\fP') the mail could not be
delivered, then this mailbox will be the last resort.  If procmail
fails to save the mail in here (deep, deep trouble :-), then the mail
will bounce back to the sender.
.Tp
.B LOCKFILE
Global semaphore file.  If this file already exists, procmail
will wait until it has gone before proceeding, and will create it itself
(cleaning it up when ready, of course).  If more than one
.I lockfile
are specified, then the previous one will be removed before trying to create
the new one.
.Tp
.B LOCKEXT
Default extension that is appended to a destination file to determine
what local
.I lockfile
to use (only if turned on, on a per-recipe basis).
.Tp
.B LOCKSLEEP
Number of seconds procmail will sleep before retrying on a
.I lockfile
(if it already existed); if not specified, it defaults to eight seconds.
.Tp
.B LOCKTIMEOUT
Number of seconds that have to have passed since a
.I lockfile
was last modified/created before procmail decides that this must be an
erroneously leftover lockfile that can be removed by force now.  If zero,
then no timeout will be used and procmail will wait forever until the
lockfile is removed; if not specified, it defaults to one hour.  This variable
is usefull to prevent indefinite hangups of
.BR sendmail /procmail.
.Tp
.B TIMEOUT
Number of seconds that have to have passed before procmail decides that
some child it started must be hanging.  The offending program will receive
a SIGTERM from procmail, and processing of the rcfile will continue. If zero,
then no timeout will be used and procmail will wait forever until the child
has terminated; if not specified, it defaults to 59 minutes.
.Tp
.B HOST
If this is not the
.I hostname
of the machine, processing of the current
.I rcfile
will immediately cease. If other rcfiles were specified on the
command line, processing will continue with the next one.  If all rcfiles
are exhausted, the program will terminate, but will not generate an error
(i.e. to the mailer it will seem that the mail has been delivered).
.Tp
.B UMASK
The name says it all (if it doesn't, then forget about this one :-).  It
is taken as an
.B octal
number.  If not specified, it defaults to 077.
.Tp
.B GREP
The program that gets called for parsing regular expressions.
.br
It is called as: "$GREP" -e "$*" [-i];
.Tp
.B SHELLMETAS
If any of the characters in SHELLMETAS appears in the line specifying
a filter or program, the line will be fed to $SHELL
instead of being executed directly.
.Tp
.B SHELLFLAGS
Any invocation of $SHELL will be like:
.br
"$SHELL" "$SHELLFLAGS" "$*";
.Tp
.B SENDMAIL
If you're not using the
.I forwarding
facility don't worry about this one.  It specifies the program being
called to forward any mail.
.br
It gets invoked as: "$SENDMAIL" $@;
.Tp
.B NORESRETRY
Number of retries that are to be made if any `\fBprocess table full\fP',
`\fBfile table full\fP', `\fBout of memory\fP' or
`\fBout of swap space\fP' error should occur.  If this number is negative,
then procmail will retry indefinitely; if not specified, it defaults to two
times.  The retries occur with a $SUSPEND second interval.  The idea behind
this is, that if the
.I swap
.I space
has been exhausted or the
.I process
.I table
is full, usually several other programs will either detect this
and abort or crash 8-), and thereby freeing valuable
.I resources
for procmail.
.Tp
.B SUSPEND
Number of seconds that procmail will pause if it has to wait for something
that is currently unavailable (memory, fork, etc.); if not specified, it will
default to 16 seconds.  See also:
.BR LOCKSLEEP .
.Tp
.B LINEBUF
Length of the internal line buffers, cannot be set smaller than 128.  All lines
read from the rcfile
.RI ( not
the mail itself, which can have arbitrary line lengths, or could be a binary
file for that matter) should not exceed $LINEBUF characters before and after
expansion.  If not specified, it defaults to 2048.
.Sh OPTIONS
.Tp 0.5i
.B \-d
Turns on debugging mode.  procmail will log every little thing it
does to $LOGFILE.  Very usefull if you wonder if procmail parses
your rcfile file right.
.Tp
.B \-p
Preserve any old environment.  Normally procmail clears the environment
upon startup. However, in any case: any default values will override any
preexisting environment variables, i.e. procmail will not pay any attention
to any predefined environment variables, it will happily overwrite them
with his own defaults.
.Tp
.B \-v
procmail will print its version number and exit.
.Sh ARGUMENTS
.LP
Any arguments containing an '=' are considered to be environment variable
assignments, they will
.I all
be evaluated after the default values have been
assigned and before the first rcfile is opened.
.LP
Any other arguments are presumed to be rcfile paths (absolute or relative to
$HOME); procmail will start with the first one it finds on the command line.
The following ones will only be parsed if the preceding ones have a not
matching HOST-directive entry, or in case they should not exist.
.LP
If no rcfiles are specified, it looks for
.BR $HOME/.procmailrc .
If not even that can be found processing will continue according to
the default settings of the environment variables and the ones specified
on the command line.
.Sh "RCFILE FORMAT"
.LP
Environment variable
.B assignments
and
.B recipes
can be freely intermixed in the rcfile. If any environment variable has
a special meaning to procmail, it will be used appropiately the moment
it is parsed. (i.e. you can change the current directory whenever you
want by specifying a new
.BR MAILDIR ,
switch lockfiles by specifying a new
.B LOCKFILE
(usually one won't need this particular application though), change
the umask at any time, etc., the possibilities are endless :-).
.LP
The assignments and substitutions of these environment variables are handled
exactly like in
.BR sh (1)
(that includes all possible quotes and escapes),
with the added bonus that blanks around the '=' sign are ignored and that,
if an environment variable appears without a trailing '=', it will be
removed from the environment.
.LP
.Ss Comments
A word beginning with # and all the following characters up to a NEWLINE
are ignored.
.Ss Recipes
.LP
A line starting with ':' marks the beginning of a recipe.  It has the
following format:
.LP
:
.RI [ " number " ]
.RI [ " options " ]
.RI "[ : [" " locallockfile " "] ]"
.LP
The
.I number
is optional (defaults to 1) and specifies the number of conditionals
following this line.  Conditionals are complete lines that are passed on to
$GREP
.BR literally .
If a conditional starts with an '!', the condition is inverted.  If you really
want the conditional to start with an '!', precede the '!' by a '\\'.
Conditionals are anded; if
.I number
is zero, then the condition is always true and no conditionals are expected
next.
.LP
.I Options
can be any of the following (don't insert spaces in between the options):
.Tp 0.5i
.B H
Feed the header to $GREP (default)
.Tp
.B B
Feed the body to $GREP
.Tp
.B D
Tell $GREP to distinguish between upper and lower case (defaults to ignoring
case)
.Tp
.B A
This recipe will depend on the last recipe without the 'A' option.  This
allows you to chain actions that depend on a common condition.  The number
of conditionals that are expected to follow default to none.
.Tp
.B h
Feed the header to the pipe (default)
.Tp
.B b
Feed the body to the pipe (default)
.Tp
.B f
Consider the pipe as a filter (ignored if a file)
.Tp
.B c
Continue processing rcfile even if this recipe matches (not needed if 'f'
specified)
.Tp
.B w
Wait for the filter or program to finish and check its exitcode (normally
ignored); if the filter is unsuccessfull, then the text will
not have been filtered.  This option is also recommended if you specified any
.I locallockfile
on this recipe.
.Ss "Local lockfile"
.LP
If you put a second ':' on the first recipe line, then procmail will use a
.I locallockfile
(for this recipe only).  You optionally can specify the locallockfile
to use; if you don't however, procmail
will use the filename specified as the destination (or the filename
following the first '>>') and will append $LOCKEXT to it.
.Ss "Recipe destination"
.LP
The next line can start with the following characters:
.Tp
.B !
Forwards to all the specified mail addresses.
.Tp
.B |
Starts the specified program, possibly in $SHELL if any
of the characters $SHELLMETAS are found (that means comments normally force
this line to be processed by the shell).
.LP
Anything else will be taken as a mailbox name (either a filename or a
directory, absolute or relative to the current directory (see $MAILDIR)).
If it is a filename (or nonexistent), the mail will be appended to it.  If
it is a directory, the mail will be delivered to a newly created, guaranteed
to be unique, file named $MSGPREFIX* in the specified directory.  If the
directory name ends in "/.", then this directory is presumed to be a MH
folder; i.e. procmail will use the lowest number it finds available.
.Sh EXAMPLES
.LP
Some example recipes are listed below:
.br
Sort out all mail to mailling list scuba-dive.
.RS
.LP
:
.br
^TOscuba
.br
scubafile
.LP
.RE
Forward all mail from peter about compilers to william (and keep a copy
of it here in petcompil).
.RS
.LP
:2 bc
.br
^From.*peter
.br
^Subject:.*compilers
.br
! william@somewhere.edu
.br
:A
.br
petcompil
.br
.RE
.LP
Add the headers of all messages that didn't come from the postmaster
to your private header collection (for
statistics or mail debugging); and use the lockfile `headc.lock'.  In order
to make sure the lockfile is not removed until the pipe has finished,
you have to specify option 'w'; otherwise the lockfile would be removed as
soon as the pipe has accepted the mail.
.RS
.LP
:hwc:
.br
!From +(postmaster|Mailer)
.br
| uncompress headc.Z; cat >>headc; compress headc
.RE
.Sh CAVEATS
.LP
If you don't explicitly tell procmail to wait (recipe option 'w') for a
program to finish, it won't wait and will terminate early (not knowing if
the program returns success).  That also means that any locallockfile on this
recipe might get removed
.I before
the program has terminated.
.LP
Continued lines in a recipe that are to be executed are concatenated
.I before
being parsed, hence
.I any
backslash-newline combinations in them are removed regardless.
.LP
Don't put comments on the lines in a recipe that get fed to $GREP,
these lines are fed to $GREP
.IR literally .
(Except for any
.I leading
\`!' or `\\', it will be stripped.
Precede it by a `\\' if you want it to be taken literally too.)
.LP
Watch out for deadlocks when doing unhealthy things like forwarding mail
to your own account.  Deadlocks can be broken by proper use of
.BR LOCKTIMEOUT .
.LP
Any default values that procmail has for some environment variables will
.B always
override the ones that were already defined.  If you really want to
override the defaults, you either have to put them in the
.B rcfile
or in the command line as arguments.
.Sh FILES
.PD 0
.Tp 2.2i
.B /etc/passwd
to get the recipients USER, HOME and SHELL variable defaults
.Tp
.B /usr/spool/mail/$USER
default last resort to put mail
.Tp
.B $HOME/.procmailrc
default rc file
.Tp
.B $HOME/.mailbox
default mailbox
.Tp
.B /usr/spool/mail/$USER.lock
lockfile for standard system mail directory (not used by
.B procmail
unless you explicitly tell it to)
.Tp
.B /usr/lib/sendmail
default mail forwarder
.Tp
.B /usr/bin/egrep
default regular expression parser
.PD
.Sh "SEE ALSO"
.LP
.BR sh (1),
.BR csh (1),
.BR mail (1),
.BR binmail (1),
.BR uucp (1C),
.BR aliases (5),
.BR sendmail (8),
.BR egrep (1V),
.BR lockfile (1),
.BR formail (1)
.Sh DIAGNOSTICS
.Tp 2.3i
Error while writing to "x"
Nonexistent subdirectory, no write permission, pipe died or disk full.
.Tp
Skipped: "x"
Couldn't do anything with "x" in the rcfile (syntax error), ignoring it.
.Tp
Failed forking "x"
Process table is full (and NORESRETRY has been exhausted).
.Tp
Program failure of "x"
Program that was started by procmail didn't return EX_OK (=0).
.Tp
Failed to execute "x"
Program not in path, or not executable.
.Tp
Couldn't unlock "x"
Lockfile was already gone, or write permission to the directory were the
lockfile is has been denied.
.Tp
Out of memory
The system is out of swap space (and NORESRETY has been exhausted).
.Tp
Lockfailure on "x"
Can only occur if you specify some real weird (and illegal) lockfilenames
or if the
.B lockfile
could not be created because of insufficient permissions or noexistent
subdirectories.
.Tp
Forcing lock on "x"
Specified
.B lockfile
is going to be removed by force because of a timeout (see also:
.BR LOCKTIMEOUT ).
.Tp
Forced unlock denied on "x"
No write permission in the directory where
.B lockfile
resides, or more than one procmail trying to force a lock at exactly the same
time.
.Tp
Timeout, terminating "x"
Timeout has occurred on program/filter "x".
.Tp
Terminating prematurely whilst waiting for .\|.\|.
Procmail received a signal while it was waiting for .\|.\|.
.Tp
Rescue of unfiltered data succeeded/failed
A filter returned unsuccessfully, procmail tried to get back the original text.
.Tp
Mail bounced
Procmail hasn't been able to deliver the mail correctly.
.Tp
Exceeded LINEBUF
Buffer overflow detected, LINEBUF was too small, memory might be corrupted.
.Tp
Bad substitution of "x"
Not a valid environment variable name specified.
.Tp
Unexpected EOL
Missing closing quote, or trying to escape EOF.
.Sh "DIAGNOSTICS with -d option"
.Tp 2.3i
Match on "x"
Conditional matched
.Tp
No match on "x"
Conditional didn't match, recipe skipped
.Tp
Assigning "x"
Environment variable assignment
.Tp
Opening "x"
Opening file "x" for appending
.Tp
Locking "x"
Creating lockfile "x"
.Tp
Unlocking "x"
Removing lockfile "x" again
.Tp
Executing "x"
Starting program "x"
.Tp
Rcfile: "x"
Rcfile changed to "x"
.Tp
HOST mismatched "x"
This host was called "x", HOST contained something else
.PD
.Sh WARNINGS
.LP
You should create a shell script that uses
.BR lockfile (1)
before invoking your mail shell on any mailbox file other than the system
mailbox (unless of course, your mail shell uses the same lockfiles (local
or global) you specified in your rcfile).
.LP
In the unlikely event that you absolutely need to kill
procmail before it has finished, first try and use
the regular kill command
.RB ( SIGTERM ),
otherwise some
.I lockfiles
might not get removed.
.Sh BUGS
.LP
The only substitutions of environment variables that can be handled by
procmail itself are of the type $name, ${name}, $$ and $-; whereas $- will
be substituted by the name of the last folder delivered to.
.LP
After a lockfile is removed by force, a suspension of $SUSPEND seconds
is taken into account, in order to prevent the inadvertent immediate removal
of any newly created lockfile by another program.
.LP
A line buffer of length $LINEBUF is used when processing the
.IR rcfile ,
any expansions
.B have
to fit within this limit; if they don't, behaviour is undefined.
.LP
procmail uses the regular kill command
.RB ( SIGTERM ),
to terminate any runaway filter, but it does not check if the filter responds
to that signal and it only sends it to the filter itself, not to any of its
children.
.LP
If the global lockfile has a
.I relative
path, and the current directory
is not the same as when the global lockfile was created, then the global
lockfile will not be removed if procmail exits at that point (remedy:
use
.I absolute
paths to specify global lockfiles).
.LP
Some braindamaged mailers want all lines that start with `From ' to be escaped,
procmail only escapes those that could really be dangerous; to support those
other mailers you should consider using
.BR formail (1)
as a filter for all your mail.
.Sh MISCELLANEOUS
.LP
Any program executed from within procmail will be searched for along the PATH.
It is advisable however, to
specify an absolute path for $GREP, because it gets executed fairly often.
.LP
Whitespace is ignored in the rcfile, except between the flags and on the
lines that are fed to $GREP; i.e. you can indent everything except the
condition lines.
.LP
If the regular expression starts with `\fB^TO\fP' it will be substituted by
`\fB^(To|Cc|Apparently-To):.*\fP', which should catch all destination
specifications.
.LP
Any lines in the body of the message that look like postmarks are prepended
with '>' (disarms bogus mailheaders).  The regular expression that is used
to search for these postmarks is:
.RS
\\n\\nFrom +[^\\t\\n ]+ +[^\\n\\t]
.RE
.LP
Should the uid procmail is running under, have no corresponding /etc/passwd
entry, then HOME will default to /tmp, USER will default to #uid.
.LP
When delivering to directories (or to MH folders) you
.B don't
need to use lockfiles to prevent several concurrently running procmail
programs from messing up.
.LP
Delivering to MH folders is slightly more time consuming than delivering
to normal directories or mailboxes, because procmail has to search for
the first available number (instead of having the filename immediately
available).
.Sh NOTES
.LP
For
.I really
complicated processing you can even consider calling
.B procmail
recursively.
.br
.ne 20
.LP
Your $HOME/.forward (beware, it
.B has
to be world readable) file should contain (include the single and double
quotes,
.I must
be an
.I absolute
path):
.LP
"|IFS=' ';exec /usr/local/bin/procmail"
.br
.Ss "A sample small .procmailrc:"
.br
PATH=/bin:/usr/bin:/usr/local/bin
.br
MAILDIR=$HOME/Mail      #you'd better make sure it exists
.br
DEFAULT=$MAILDIR/mbox
.br
LOGFILE=$MAILDIR/from
.br
LOCKFILE=$HOME/.lockmail
.br
:
.br
^From.*berg
.br
from_me
.br
:
.br
^Subject:.*Flame
.br
/dev/null
.LP
procmail performs the locking in an NFS-secure way.
.Sh AUTHOR
.LP
Stephen R. van den Berg at RWTH-Aachen, Germany
.RS
berg@messua.informatik.rwth-aachen.de
.br
berg@physik.tu-muenchen.de
.RE
